from itertools import groupby
import numpy as np
from matplotlib import pyplot as plt



raw_data_classic = [
    [ 35, 1.04, 1.54 ],
    [ 35, 1.06, 1.70 ],
    [ 35, 1.00, 1.69 ],
    [ 35, 1.03, 1.37 ],
    [ 35, 1.69, 2.64 ],
    [ 35, 1.28, 1.78 ],
    [ 35, 1.38, 1.95 ],
    [ 35, 0.95, 1.19 ],
    [ 35, 1.14, 1.60 ],
    [ 35, 1.01, 1.72 ],
    [ 35, 1.30, 1.83 ],
    [ 35, 1.73, 3.01 ],
    [ 55, 1.97, 2.55 ],
    [ 55, 1.23, 1.63 ],
    [ 55, 1.10, 1.81 ],
    [ 55, 1.69, 1.66 ],
    [ 55, 1.64, 1.90 ],
    [ 55, 1.89, 2.15 ],
    [ 55, 2.20, 2.60 ],
    [ 55, 1.23, 1.58 ],
    [ 55, 1.38, 1.69 ],
    [ 55, 1.38, 1.79 ],
    [ 55, 1.17, 1.45 ],
    [ 55, 1.87, 2.24 ],
    [ 44, 1.64, 2.17 ],
    [ 44, 1.96, 2.95 ],
    [ 44, 1.42, 2.46 ],
    [ 44, 1.77, 2.52 ],
    [ 44, 1.91, 2.56 ],
    [ 44, 1.75, 2.75 ],
    [ 44, 1.78, 2.42 ],
    [ 44, 1.36, 1.65 ],
    [ 44, 1.47, 1.83 ],
    [ 44, 1.57, 1.95 ],
    [ 44, 1.91, 2.71 ],
    [ 44, 1.84, 2.22 ],
    [ 31, 0.70, 0.94 ],
    [ 31, 0.48, 0.74 ],
    [ 31, 0.51, 0.65 ],
    [ 31, 0.94, 1.84 ],
    [ 31, 1.03, 2.28 ],
    [ 31, 0.56, 0.99 ],
    [ 31, 1.55, 1.82 ],
    [ 31, 0.61, 0.88 ],
    [ 31, 0.58, 0.73 ],
    [ 31, 0.59, 0.71 ],
    [ 31, 0.73, 1.14 ],
    [ 31, 0.74, 1.28 ],
    [ 50, 1.83, 2.53 ],
    [ 50, 1.41, 1.81 ],
    [ 50, 1.10, 1.75 ],
    [ 50, 2.20, 2.59 ],
    [ 50, 1.86, 2.21 ],
    [ 50, 2.29, 2.52 ],
    [ 50, 1.88, 2.37 ],
    [ 50, 1.43, 1.90 ],
    [ 50, 1.47, 1.98 ],
    [ 50, 1.95, 2.54 ],
    [ 50, 2.29, 2.98 ],
    [ 50, 2.36, 2.69 ],
    [ 28, 0.89, 1.59 ],
    [ 28, 0.60, 0.93 ],
    [ 28, 0.79, 0.90 ],
    [ 28, 0.91, 1.42 ],
    [ 28, 0.92, 1.76 ],
    [ 28, 0.55, 0.71 ],
    [ 28, 0.96, 1.20 ],
    [ 28, 0.86, 1.26 ],
    [ 28, 0.70, 1.03 ],
    [ 28, 0.88, 1.29 ],
    [ 28, 0.69, 0.97 ],
    [ 28, 0.92, 1.21 ],
    [ 65, 1.99, 2.22 ],
    [ 65, 1.06, 1.29 ],
    [ 65, 1.09, 1.52 ],
    [ 65, 2.08, 2.31 ],
    [ 65, 1.86, 2.43 ],
    [ 65, 1.70, 1.99 ],
    [ 65, 1.94, 2.63 ],
    [ 65, 1.10, 1.19 ],
    [ 65, 1.14, 1.31 ],
    [ 65, 1.22, 1.50 ],
    [ 65, 1.05, 1.41 ],
    [ 65, 1.66, 2.23 ],
    [ 40, 1.90, 2.41 ],
    [ 40, 1.69, 2.20 ],
    [ 40, 0.92, 1.80 ],
    [ 40, 2.01, 2.79 ],
    [ 40, 2.17, 2.41 ],
    [ 40, 1.54, 2.42 ],
    [ 40, 2.88, 3.76 ],
    [ 40, 1.40, 2.21 ],
    [ 40, 1.57, 2.01 ],
    [ 40, 1.60, 1.98 ],
    [ 40, 2.08, 3.10 ],
    [ 40, 1.91, 2.94 ],
    [ 60, 2.97, 3.61 ],
    [ 60, 1.05, 1.19 ],
    [ 60, 1.35, 1.89 ],
    [ 60, 1.37, 1.96 ],
    [ 60, 2.16, 2.33 ],
    [ 60, 2.21, 2.55 ],
    [ 60, 1.54, 2.02 ],
    [ 60, 2.18, 2.53 ],
    [ 60, 1.21, 1.46 ],
    [ 60, 1.17, 1.46 ],
    [ 60, 1.31, 1.71 ],
    [ 60, 0.91, 1.23 ],
    [ 60, 1.61, 2.13 ],
    [ 24, 2.29, 3.24 ],
    [ 24, 1.90, 2.71 ],
    [ 24, 1.58, 2.12 ],
    [ 24, 1.98, 3.22 ],
    [ 24, 1.90, 3.18 ],
    [ 24, 2.06, 3.18 ],
    [ 24, 1.92, 2.93 ],
    [ 24, 1.38, 2.09 ],
    [ 24, 1.65, 2.77 ],
    [ 24, 1.79, 3.08 ],
    [ 24, 1.70, 2.72 ],
    [ 24, 1.83, 2.78 ],
    [ 20, 5.45, 8.14 ],
    [ 20, 4.97, 7.33 ],
    [ 20, 4.69, 7.41 ],
    [ 20, 5.18, 7.98 ],
    [ 20, 5.13, 8.33 ],
    [ 20, 5.54, 8.41 ],
    [ 20, 5.31, 7.84 ],
    [ 20, 4.42, 6.67 ],
    [ 20, 5.11, 7.58 ],
    [ 20, 4.65, 7.06 ],
    [ 20, 5.68, 8.13 ],
    [ 20, 4.83, 7.29 ],
    [ 18, 8.82, 13.78 ],
    [ 18, 7.57, 12.60 ],
    [ 18, 6.99, 10.82 ],
    [ 18, 7.88, 11.81 ],
    [ 18, 8.86, 12.35 ],
    [ 18, 8.74, 13.97 ],
    [ 18, 7.63, 10.53 ],
    [ 18, 6.59, 9.83 ],
    [ 18, 6.55, 9.87 ],
    [ 18, 6.48, 9.81 ],
    [ 18, 6.14, 8.44 ],
    [ 18, 6.05, 8.61 ],
    [ 70, 1.83, 2.15 ],
    [ 70, 1.05, 1.43 ],
    [ 70, 1.13, 1.61 ],
    [ 70, 2.02, 1.78 ],
    [ 70, 2.30, 2.55 ],
    [ 70, 1.76, 1.97 ],
    [ 70, 1.68, 2.59 ],
    [ 70, 1.03, 1.21 ],
    [ 70, 1.29, 1.44 ],
    [ 70, 1.30, 1.62 ],
    [ 70, 1.04, 1.25 ],
    [ 70, 1.12, 1.94 ],
]

raw_data = [
    ( 18, 0.14, 0.15 ),
    ( 18, 0.45, 0.64 ),
    ( 18, 0.46, 0.67 ),
    ( 18, 0.23, 0.37 ),
    ( 18, 0.20, 0.27 ),
    ( 18, 0.42, 0.52 ),
    ( 18, 0.26, 0.36 ),
    ( 18, 0.17, 0.20 ),
    ( 18, 0.19, 0.30 ),
    ( 18, 0.20, 0.34 ),
    ( 18, 0.16, 0.20 ),
    ( 18, 0.19, 0.30 ),
    ( 24, 0.15, 0.17 ),
    ( 24, 0.49, 0.53 ),
    ( 24, 0.54, 0.71 ),
    ( 24, 0.24, 0.44 ),
    ( 24, 0.22, 0.34 ),
    ( 24, 0.43, 0.57 ),
    ( 24, 0.26, 0.30 ),
    ( 24, 0.14, 0.25 ),
    ( 24, 0.16, 0.19 ),
    ( 24, 0.30, 0.78 ),
    ( 24, 0.18, 0.34 ),
    ( 24, 0.18, 0.25 ),
    ( 40, 0.13, 0.14 ),
    ( 40, 0.54, 0.70 ),
    ( 40, 0.31, 0.42 ),
    ( 40, 0.22, 0.47 ),
    ( 40, 0.70, 0.75 ),
    ( 40, 0.34, 0.41 ),
    ( 40, 0.77, 0.78 ),
    ( 40, 0.25, 0.61 ),
    ( 40, 0.22, 0.40 ),
    ( 40, 0.13, 0.13 ),
    ( 40, 0.17, 0.26 ),
    ( 40, 0.20, 0.35 ),
    ( 31, 0.09, 0.10 ),
    ( 31, 0.20, 0.21 ),
    ( 31, 0.35, 0.47 ),
    ( 31, 0.27, 0.51 ),
    ( 31, 0.29, 0.68 ),
    ( 31, 0.24, 0.27 ),
    ( 31, 0.65, 0.68 ),
    ( 31, 0.09, 0.13 ),
    ( 31, 0.15, 0.16 ),
    ( 31, 0.12, 0.14 ),
    ( 31, 0.22, 0.37 ),
    ( 31, 0.20, 0.40 ),
    ( 44, 0.12, 0.14 ),
    ( 44, 0.55, 0.63 ),
    ( 44, 0.26, 0.40 ),
    ( 44, 0.30, 0.68 ),
    ( 44, 0.24, 0.39 ),
    ( 44, 0.25, 0.30 ),
    ( 44, 0.19, 0.32 ),
    ( 44, 0.18, 0.31 ),
    ( 44, 0.21, 0.23 ),
    ( 44, 0.16, 0.23 ),
    ( 44, 0.34, 0.81 ),
    ( 44, 0.39, 0.58 ),
    ( 55, 0.11, 0.11 ),
    ( 55, 0.28, 0.32 ),
    ( 55, 0.24, 0.39 ),
    ( 55, 0.56, 0.60 ),
    ( 55, 0.46, 0.56 ),
    ( 55, 0.61, 0.57 ),
    ( 55, 0.52, 0.56 ),
    ( 55, 0.17, 0.29 ),
    ( 55, 0.15, 0.30 ),
    ( 55, 0.23, 0.27 ),
    ( 55, 0.23, 0.28 ),
    ( 55, 0.29, 0.47 ),
    ( 20, 0.14, 0.15 ),
    ( 20, 0.35, 0.46 ),
    ( 20, 0.47, 0.59 ),
    ( 20, 0.22, 0.42 ),
    ( 20, 0.18, 0.35 ),
    ( 20, 0.38, 0.41 ),
    ( 20, 0.72, 0.64 ),
    ( 20, 0.13, 0.17 ),
    ( 20, 0.17, 0.23 ),
    ( 20, 0.22, 0.31 ),
    ( 20, 0.17, 0.28 ),
    ( 20, 0.16, 0.23 ),
    ( 50, 0.06, 0.07 ),
    ( 50, 0.35, 0.40 ),
    ( 50, 0.31, 0.45 ),
    ( 50, 0.74, 0.85 ),
    ( 50, 0.48, 0.58 ),
    ( 50, 0.72, 0.80 ),
    ( 50, 0.20, 0.28 ),
    ( 50, 0.22, 0.32 ),
    ( 50, 0.25, 0.36 ),
    ( 50, 0.16, 0.30 ),
    ( 50, 0.46, 0.50 ),
    ( 50, 0.17, 0.21 ),
    ( 60, 0.84, 0.74 ),
    ( 60, 0.33, 0.38 ),
    ( 60, 0.55, 0.62 ),
    ( 60, 0.55, 0.74 ),
    ( 60, 0.77, 0.94 ),
    ( 60, 0.77, 0.80 ),
    ( 60, 0.55, 0.62 ),
    ( 60, 0.53, 0.54 ),
    ( 60, 0.30, 0.58 ),
    ( 60, 0.28, 0.33 ),
    ( 60, 0.28, 0.29 ),
    ( 60, 0.32, 0.45 ),
    ( 60, 0.30, 0.33 ),
    ( 28, 0.10, 0.10 ),
    ( 28, 0.25, 0.26 ),
    ( 28, 0.43, 0.53 ),
    ( 28, 0.28, 0.42 ),
    ( 28, 0.19, 0.31 ),
    ( 28, 0.31, 0.38 ),
    ( 28, 0.24, 0.29 ),
    ( 28, 0.20, 0.30 ),
    ( 28, 0.13, 0.16 ),
    ( 28, 0.23, 0.34 ),
    ( 28, 0.19, 0.27 ),
    ( 28, 0.21, 0.31 ),
    ( 65, 0.69, 0.70 ),
    ( 65, 0.26, 0.35 ),
    ( 65, 0.37, 0.50 ),
    ( 65, 0.77, 0.96 ),
    ( 65, 0.74, 1.12 ),
    ( 65, 0.54, 0.71 ),
    ( 65, 0.65, 0.76 ),
    ( 65, 0.36, 0.42 ),
    ( 65, 0.43, 0.51 ),
    ( 65, 0.33, 0.35 ),
    ( 65, 0.29, 0.37 ),
    ( 65, 0.37, 0.60 ),
    ( 35, 0.10, 0.11 ),
    ( 35, 0.24, 0.45 ),
    ( 35, 0.25, 0.43 ),
    ( 35, 0.28, 0.42 ),
    ( 35, 0.55, 0.68 ),
    ( 35, 0.23, 0.25 ),
    ( 35, 0.29, 0.38 ),
    ( 35, 0.15, 0.30 ),
    ( 35, 0.14, 0.24 ),
    ( 35, 0.20, 0.25 ),
    ( 35, 0.36, 0.59 ),
    ( 35, 0.49, 0.89 ),
    ( 70, 0.52, 0.56 ),
    ( 70, 0.45, 0.57 ),
    ( 70, 0.44, 0.57 ),
    ( 70, 0.77, 0.95 ),
    ( 70, 0.82, 0.96 ),
    ( 70, 0.65, 0.77 ),
    ( 70, 0.50, 0.80 ),
    ( 70, 0.38, 0.57 ),
    ( 70, 0.35, 0.39 ),
    ( 70, 0.35, 0.48 ),
    ( 70, 0.35, 0.46 ),
    ( 70, 0.43, 0.64 ),
]

firstitem = lambda v: v[0]
raw_data_classic.sort(key=firstitem)
raw_data.sort(key=firstitem)

data_classic = []
for zoom, group in groupby(raw_data_classic, firstitem):
    group = np.array(list(group))
    data_classic.append([ zoom, np.sqrt(np.mean(group[:,1]**2)), np.sqrt(np.max(group[:,2]**2)) ])
data_classic = np.array(data_classic)

data = []
for zoom, group in groupby(raw_data, firstitem):
    group = np.array(list(group))
    data.append([ zoom, np.sqrt(np.mean(group[:,1]**2)), np.sqrt(np.max(group[:,2]**2)) ])
data = np.array(data)

plt.figure(figsize=(6*1.2,3.5*1.2))

classic_bars  = plt.bar(np.arange(len(data_classic))+0.1, data_classic[:,1], color='#a0a5a5', edgecolor='#505353', width=0.4)
bars = plt.bar(np.arange(len(data))-0.2, data[:,1], color='#396AB1', edgecolor='#1D3555', width=0.4)
plt.legend( (classic_bars[0], bars[0]), ('radial', 'proposed'), loc='upper right' )
plt.gca().set_xticks(range(len(data)))
plt.gca().set_xticklabels([ int(d) for d in data[:,0] ])
plt.xlim([-1, len(data)+1])
plt.title('Straight-line fit errors for calibrated zoom levels\n')
plt.xlabel('zoom level')
plt.ylabel('Mean residual (pixels)')

plt.tight_layout()



#
# Interpolated zoom level plots
#

data_classic = np.array([
    ( 38, 1.87, 2.72 ),
    ( 46, 2.19, 2.73 ),
    ( 52, 2.15, 2.99 ),
    ( 62, 2.13, 2.66 ),
    ( 29, 1.05, 1.52 ),
    ( 42, 1.77, 2.36 ),
    ( 22, 4.64, 6.95 ),
])

data = np.array([
    [ 22, 0.47, 0.69 ],
    [ 29, 0.40, 0.67 ],
    [ 38, 0.15, 0.26 ],
    [ 42, 0.14, 0.16 ],
    [ 46, 0.16, 0.31 ],
    [ 52, 0.43, 0.53 ],
    [ 62, 0.86, 0.94 ],
])


plt.figure(figsize=(6*1.2,3.5*1.2))

classic_bars  = plt.bar(np.arange(len(data_classic))+0.0625, data_classic[:,1], color='#a0a5a5', edgecolor='#505353', width=0.25)
bars = plt.bar(np.arange(len(data))-0.125, data[:,1], color='#396AB1', edgecolor='#1D3555', width=0.25)
plt.gca().set_xticks(range(len(data)))
plt.gca().set_xticklabels([ int(d) for d in data[:,0] ])
#plt.legend( (classic_bars[0], bars[0]), ('radial', 'proposed'), loc='upper right' )
plt.xlim([-1, len(data)+1])
plt.title('Straight-line fit errors for interpolated zoom levels\n')
plt.xlabel('zoom level')
plt.ylabel('Mean residual (pixels)')

plt.tight_layout()
plt.show()
